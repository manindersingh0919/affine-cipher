public class AffineCipher {

  // Decrypts the given ciphertext using the given affine cipher parameters a and b
  public static String decrypt(String ciphertext, int a, int b) {
    StringBuilder plaintext = new StringBuilder(); // StringBuilder to store the decrypted plaintext

    // Loop through each character in the ciphertext
    for (int i = 0; i < ciphertext.length(); i++) {
      // Calculate the corresponding plaintext character using the formula
      // (c - 'a' + 26 - b) * modInverse(a, 26) % 26, where c is the current ciphertext character
      int c = (ciphertext.charAt(i) - 'a' + 26 - b) * modInverse(a, 26) % 26;
      // Append the calculated character to the plaintext
      plaintext.append((char)(c + 'a'));
    }
    return plaintext.toString(); // Return the decrypted plaintext
  }

  // Calculates the modular inverse of a modulo m
  private static int modInverse(int a, int m) {
    int m0 = m;
    int y = 0, x = 1;
    if (m == 1) return 0;
    while (a > 1) {
      int q = a / m;
      int t = m;
      m = a % m;
      a = t;
      t = y;
      y = x - q * y;
      x = t;
    }
    if (x < 0) x += m0;
    return x;
  }

  // Driver stub to test the decryption
  public static void main(String[] args) {
    int a = 7;
    int b = 8;
    String ciphertext = "edsgickxhuklzveqzvxwkzukcvuh";
    String plaintext = decrypt(ciphertext, a, b);
    System.out.println("The plaintext was: " + plaintext);
  }
}
