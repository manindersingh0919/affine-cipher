public class AffineCipher {

    //setting up affine cipher parameters 'a' and 'b' and starts decrypting
    public static String decrypt(String ciphertext, int a, int b) {
        //we use a stringbuilder class to store the decrypted plaintext
      StringBuilder plaintext = new StringBuilder();  

      // runs through every letter in the given ciphertext 
      for (int i = 0; i < ciphertext.length(); i++) {
        // get plaintxt by using the formula; (c - 'a' + 26 - b) * modInverse(a, 26) % 26,
        int c = (ciphertext.charAt(i) - 'a' + 26 - b) * modInverse(a, 26) % 26;
        // Append to plaintext
        plaintext.append((char)('a'));
      }
      // Return the decrypted plaintext
      return plaintext.toString(); 
    }
  
    // Calculates the modular inverse of a modulo m
    private static int modInverse(int a, int m) {
      int m0=m;
      int y=0, x=1;
      if (m==1) return 0;
      while (a > 1) {
        int q=a / m;
        int t=m;
        m=a % m;
        a=t;
        t=y;
        y=x - q * y;
      }
      if (x < 0) x += m0;
      return x;
    }
  
    // Driver stub class to test decryption 
    public static void main(String[] args) {
      int a = 7; int b = 8
      String ciphertext = "edsgickxhuklzveqzvxwkzukcvuh";
      String plaintext = decrypt(ciphertext, a, b);
      System.out.println("The plaintext was: " + plaintext);
    }
  }
